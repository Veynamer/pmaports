# Reference: <https://postmarketos.org/vendorkernel>
# Kernel config based on: arch/arm64/configs/rockchip_linux_defconfig
# Maintainer: Antoine Martin (ayakael) <dev@ayakael.net>
pkgname=linux-radxa
pkgver=6.1.84
pkgrel=1
pkgdesc="Radxa kernel fork"
arch="aarch64"
_carch="arm64"
_flavor="radxa"
url="https://kernel.org"
license="GPL-2.0-only"
options="!strip !check !tracedeps pmb:cross-native"
subpackages="$pkgname-dev:_dev:$CBUILD_ARCH"
makedepends="
	bash
	bc
	bison
	devicepkg-dev
	dtc
	flex
	findutils
	installkernel
	linux-firmware
	linux-headers
	openssl-dev
	perl
	xz
"

# Source
_repository="kernel"
_commit="51ed5f015c3cbba79436c47db19896d6d7cd011f"
_config="config-$_flavor.$arch"
source="
	$pkgname-$_commit.tar.gz::https://github.com/radxa/$_repository/archive/$_commit.tar.gz
	$_config
"
builddir="$srcdir/$_repository-$_commit"

prepare() {
	default_prepare

	local _builddir="$srcdir"/build-$_flavor.$CARCH
	mkdir -p "$_builddir"
	cp "$srcdir/config-$_flavor.$CARCH" "$_builddir"/.config

	# copies missing library
	mkdir -p "$_builddir"/drivers/gpu/arm/bifrost/
	cp "$builddir"/drivers/gpu/arm/bifrost/mali_csffw.bin "$_builddir"/drivers/gpu/arm/bifrost/mali_csffw.bin

	# remove and regenerate localversion
	rm -f localversion*
	echo "-$pkgrel-$_flavor" > "$_builddir"/localversion-postmarketos

	make -C "$builddir" \
		O="$_builddir" \
		ARCH="$_carch" \
		olddefconfig
}

build() {
	unset LDFLAGS
	cd "$srcdir"/build-$_flavor.$CARCH
	local _kver=$(make kernelversion)
	if [ "$_kver" != "$pkgver" ]; then
		error "Version in Makefile ($_kver) does not correspond with pkgver ($pkgver)"
		return 1
	fi
	make ARCH="$_carch" CC="${CC:-gcc}" \
		KBUILD_BUILD_VERSION="$((pkgrel + 1))-postmarketOS"
}

package() {
	downstreamkernel_package "$srcdir"/build-$_flavor.$CARCH "$pkgdir" "$_carch" "$_flavor"

	cd "$srcdir"/build-$_flavor.$CARCH
	mkdir -p "$pkgdir"/boot
	make modules_install dtbs_install \
		ARCH="$_carch" \
		INSTALL_PATH="$pkgdir"/boot \
		INSTALL_MOD_PATH="$pkgdir" \
		INSTALL_MOD_STRIP=1 \
		INSTALL_DTBS_PATH="$pkgdir"/boot/dtbs
	rm -f "$pkgdir"/lib/modules/*/build "$pkgdir"/lib/modules/*/source
}

_dev() {
	local _builddir="$srcdir"/build-$_flavor.$CARCH

	cd "$_builddir"
	local _abi_release="$(make -s kernelrelease)"
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# simlar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for $_flavor kernel"
	depends="$_depends_dev"

	local dir="$subpkgdir"/usr/src/linux-headers-$_abi_release

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	cp "$_builddir"/.config "$dir"/.config
	echo "-$pkgrel-$_flavor" > "$dir"/localversion-postmarketos

	make -j1 -C "$builddir" ARCH="$_carch" O="$dir" \
		syncconfig prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the sources
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$builddir"
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' \) \
		-print | cpio -pdm "$dir"

	cp -a scripts include "$dir"
	find $(find arch -name include -type d -print) -type f \
		| cpio -pdm "$dir"

	install -Dm644 "$_builddir"/Module.symvers \
		"$dir"/Module.symvers

	mkdir -p "$subpkgdir"/lib/modules/$_abi_release
	ln -sf /usr/src/linux-headers-$_abi_release \
		"$subpkgdir"/lib/modules/$_abi_release/build
}

# shellcheck shell=sh
# BEGIN PMBOOTSTRAP OVERRIDES

# shellcheck disable=SC3043,SC2086,SC2154,SC2155,SC2034,SC3003,SC3057
sumcheck() {
	local sums="$1"
	local dummy f endreturnval originalparams origin file

	# get number of checksums
	set -- $sums
	local numsums=$(( $# / 2 ))

	set -- $source
	if [ $# -ne $numsums ]; then
		die "Number of sha512sums($numsums) does not correspond to number of sources($#)"
	fi
	fetch || return 1
	msg "Checking sha512sums..."
	cd "$srcdir" || return 1
	IFS=$'\n'
	endreturnval=0
	for src in $sums; do
		origin=$1; shift
		if ! echo "$src" | sha512sum -c; then
			if is_remote $origin; then
				endreturnval=2
			else
				if [ "$endreturnval" -ne 2 ]; then
				endreturnval=1
				fi
				continue
			fi

			local csum="${src:0:8}"
			local file="$SRCDEST/$(filename_from_uri $origin)"
			mv "$file" "$file.$csum"
		fi
	done
	unset IFS
	return $endreturnval
}

# Patched version of verify() to only warn instead of
# refusing to build.
# shellcheck disable=SC2034,SC2154,SC3043
verify() {
	rm -f /tmp/apkbuild_verify_failed
	local verified=false algo=
	sumcheck "$sha512sums" && verified=true
	retval=$?
	if [ $retval -eq 2 ]; then
		echo "network" > /tmp/apkbuild_verify_failed
		die "Failed to verify checksums of remote sources. The file has been renamed" >&2
	fi
	if [ -n "$source" ] && ! $verified; then
		echo "local" > /tmp/apkbuild_verify_failed
	fi
	return 0
}

# END PMBOOTSTRAP OVERRIDES
sha512sums="
75269ce2ffbe3ca5a723203aefdda8b47c87730a5b34d828c71c8c7578d726e8f3fc0d526635033852c136e39c19af921a9965b6491ee5a7ae044c7c86d8b8de  linux-radxa-51ed5f015c3cbba79436c47db19896d6d7cd011f.tar.gz
b0faa4bb87454be414063bea3b1e7636ef856b0ba7e2149ef437a7e1a3f78106a7942a2d3f732aee508c036821693dba5f3e56e486802337848c9374f36cd801  config-radxa.aarch64
"
